/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as PaymentRouteImport } from './routes/payment'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AssetsRouteImport } from './routes/assets'
import { Route as IndexRouteImport } from './routes/index'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentRoute = PaymentRouteImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AssetsRoute = AssetsRouteImport.update({
  id: '/assets',
  path: '/assets',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/assets': typeof AssetsRoute
  '/dashboard': typeof DashboardRoute
  '/payment': typeof PaymentRoute
  '/profile': typeof ProfileRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/assets': typeof AssetsRoute
  '/dashboard': typeof DashboardRoute
  '/payment': typeof PaymentRoute
  '/profile': typeof ProfileRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/assets': typeof AssetsRoute
  '/dashboard': typeof DashboardRoute
  '/payment': typeof PaymentRoute
  '/profile': typeof ProfileRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/assets' | '/dashboard' | '/payment' | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/assets' | '/dashboard' | '/payment' | '/profile'
  id: '__root__' | '/' | '/assets' | '/dashboard' | '/payment' | '/profile'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AssetsRoute: typeof AssetsRoute
  DashboardRoute: typeof DashboardRoute
  PaymentRoute: typeof PaymentRoute
  ProfileRoute: typeof ProfileRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment': {
      id: '/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assets': {
      id: '/assets'
      path: '/assets'
      fullPath: '/assets'
      preLoaderRoute: typeof AssetsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AssetsRoute: AssetsRoute,
  DashboardRoute: DashboardRoute,
  PaymentRoute: PaymentRoute,
  ProfileRoute: ProfileRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
